package FriendlyStudentAccomApp;


import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Frame;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.WindowConstants;
import javax.swing.table.DefaultTableModel;

/**
 * COIT11134 2019 Term1 
 * Assignment 1 Model Solution
 * 
 * ViewRentalsGUI class
 * The GUI interface to show the list and details of all entered Rental objects
 * Contains a single JTable that displays all the details
 
* @author Bernard Li
 */

public class ViewRentalsGUI extends javax.swing.JFrame {

    /**
     * Creates new form ViewRentalsGUI
    
     *                      TO UPDATE: to be changed to List for Phase 2
     */
    public ViewRentalsGUI(ArrayList<Rental> currentRental) 
    {
        this.rentalList = currentRental; // current vehicle to be displayed
                                            // TO UPDATE: change to list of vehicles for phase 2
        
        initComponents();
        
        loadData(); // load the details into the JTable
        
        setLocationRelativeTo(null);
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelTitle = new JLabel();
        jScrollPane1 = new JScrollPane();
        displayTable = new JTable();
        btnClose = new JButton();

        setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
        setMinimumSize(new Dimension(1200, 300));
        setPreferredSize(new Dimension(1200, 300));
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        labelTitle.setFont(new Font("Tahoma", 1, 24)); // NOI18N
        labelTitle.setHorizontalAlignment(SwingConstants.CENTER);
        labelTitle.setText("List of Rentals");
        labelTitle.setBorder(BorderFactory.createEtchedBorder());
        getContentPane().add(labelTitle, BorderLayout.PAGE_START);

        displayTable.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Rental Type", "Rental ID", "Address", "Weekly Price ($)", "Furnished", "Description", "Couples Allowed", "Attached Bathroom", "Num of Rooms", "Num of Bathrooms", "Garage Space", "Pets Allowed"
            }
        ) {
            Class[] types = new Class [] {
                String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(displayTable);

        getContentPane().add(jScrollPane1, BorderLayout.CENTER);

        btnClose.setFont(new Font("Tahoma", 1, 14)); // NOI18N
        btnClose.setText("Close");
        btnClose.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });
        getContentPane().add(btnClose, BorderLayout.PAGE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // method executed when the [Close] button is clicked
    // dispose of this frame and bring the main GUI frame back into focus
    private void btnCloseActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        
        // dispose of this frame
        this.dispose();
        
        // re-enable main frame
        Frame mainFrame = FSAGUI.getFrames()[0];
        mainFrame.setEnabled(true);
        mainFrame.toFront();
    }//GEN-LAST:event_btnCloseActionPerformed

    // window closing event to be re-directed to exit() method in FSAGUI
    private void formWindowClosing(WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        FSAGUI.exit();
    }//GEN-LAST:event_formWindowClosing

    // used to load data into JTable
    // TO UPDATE: loop through the List in Phase 2 and insert each Rental object into the Table
    private void loadData()
    {
        for (Rental rentalList1 : rentalList) {
            insertSingleRentalIntoTable(rentalList1);
        }
    }

    // used to extract the details of a Rental object and insert a row into the JTable
    // fields not used will be given a N/A value
    private void insertSingleRentalIntoTable(Rental currentRental) 
    {
        DefaultTableModel model = (DefaultTableModel) displayTable.getModel();  // extract the model from the JTable

        if(currentRental instanceof RoomRental)
        {
            RoomRental room = (RoomRental)currentRental;
            model.addRow(new Object[]{"Room", room.getRentalID(), room.getAddress(), String.format("$%.2f", room.getWeeklyPrice()), room.getFurnished()?"Yes":"No", room.getDescription(),
                                          room.getCouplesAllowed()?"Yes":"No", room.getAttachedBathroom()?"Yes":"No", "N/A", "N/A", "N/A", "N/A"
                                        });     // insert the details of a RoomRental into the table
        }
        
        if(currentRental instanceof WholeRental)
        {
            WholeRental whole = (WholeRental)currentRental;
            model.addRow(new Object[]{"Whole Unit", whole.getRentalID(), whole.getAddress(), String.format("$%.2f", whole.getWeeklyPrice()), whole.getFurnished()?"Yes":"No", whole.getDescription(),
                                        "N/A", "N/A", whole.getNumberOfRooms(), whole.getNumberOfBathrooms(), whole.getGarageSpace()?"Yes":"No", whole.getPetsAllowed()?"Yes":"No"
                                        });     // insert the details of a WholeRental into the table
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton btnClose;
    private JTable displayTable;
    private JScrollPane jScrollPane1;
    private JLabel labelTitle;
    // End of variables declaration//GEN-END:variables

    private ArrayList<Rental> rentalList;   // reference to the Rental object passed to this frame
                                    // TO UPDATE: to be changed to a List in Phase 2

}// end class ViewRentalsGUI
