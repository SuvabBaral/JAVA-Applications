package FriendlyStudentAccomApp;


import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.LayoutStyle;
import javax.swing.SwingConstants;
import javax.swing.WindowConstants;

/**
 * COIT11134 2019 Term1 
 * Assignment 1 Model Solution
 * 
 * FSAGUI class
 * The main GUI interface for FSA's management software
 * Contains access to:
 * - Add new Rooms or Whole Units (only 1 for Phase 1)
 * - Edit/Update previously entered Rental objects (only 1 for Phase 1)
 * - Display details of previously entered Rental objects (only 1 for Phase 1)
 * - Exit the application safely via a confirmation message
 * 
 * @author Bernard Li
 */

public class FSAGUI extends javax.swing.JFrame {

    /**
     * Creates new form FSAGUI
     */
    public FSAGUI() {
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelTitle = new JLabel();
        btnAddRental = new JButton();
        btnEditRental = new JButton();
        btnViewRentals = new JButton();
        btnExit = new JButton();
        panelMain = new JPanel();
        labelRentalType = new JLabel();
        comboboxRentalType = new JComboBox<String>();
        labelRentalID = new JLabel();
        tfRentalID = new JTextField();
        labelAddress = new JLabel();
        tfAddress = new JTextField();
        labelWeeklyPrice = new JLabel();
        tfWeeklyPrice = new JTextField();
        labelFurnished = new JLabel();
        cbFurnished = new JCheckBox();
        labelDescription = new JLabel();
        tfDescription = new JTextField();
        labelCouplesAllowed = new JLabel();
        cbCouplesAllowed = new JCheckBox();
        labelBathroom = new JLabel();
        cbAttachedBathroom = new JCheckBox();
        labelNumberOfRooms = new JLabel();
        comboboxNumberOfRooms = new JComboBox<String>();
        labelNumberOfBathrooms = new JLabel();
        comboboxNumberOfBathrooms = new JComboBox<String>();
        labelGarage = new JLabel();
        cbGarageSpace = new JCheckBox();
        labelPetsAllowed = new JLabel();
        cbPetsAllowed = new JCheckBox();
        btnAdd = new JButton();
        btnEdit = new JButton();
        btnUpdate = new JButton();
        tfNumberOfCurrentlyDisplayedRental = new JTextField();
        labelOf = new JLabel();
        tfTotalNumberOfRentals = new JTextField();
        btnBack = new JButton();
        btnNext = new JButton();
        btnRemove = new JButton();

        setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        labelTitle.setFont(new Font("SansSerif", 1, 30)); // NOI18N
        labelTitle.setHorizontalAlignment(SwingConstants.CENTER);
        labelTitle.setText("Friendly Student Accommodation");

        btnAddRental.setFont(new Font("SansSerif", 1, 14)); // NOI18N
        btnAddRental.setText("Add Rental");
        btnAddRental.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnAddRentalActionPerformed(evt);
            }
        });

        btnEditRental.setFont(new Font("SansSerif", 1, 14)); // NOI18N
        btnEditRental.setText("Edit Rental");
        btnEditRental.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnEditRentalActionPerformed(evt);
            }
        });

        btnViewRentals.setFont(new Font("SansSerif", 1, 14)); // NOI18N
        btnViewRentals.setText("View Rentals");
        btnViewRentals.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnViewRentalsActionPerformed(evt);
            }
        });

        btnExit.setFont(new Font("SansSerif", 1, 14)); // NOI18N
        btnExit.setText("Exit");
        btnExit.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        labelRentalType.setFont(new Font("Tahoma", 1, 14)); // NOI18N
        labelRentalType.setText("Rental Type");

        comboboxRentalType.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        comboboxRentalType.setModel(new DefaultComboBoxModel(new String[] { "Select Rental Type", "Room", "Whole Unit" }));
        comboboxRentalType.setEnabled(false);
        comboboxRentalType.addItemListener(new ItemListener() {
            public void itemStateChanged(ItemEvent evt) {
                comboboxRentalTypeItemStateChanged(evt);
            }
        });

        labelRentalID.setFont(new Font("Tahoma", 1, 14)); // NOI18N
        labelRentalID.setText("Rental ID");

        tfRentalID.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        tfRentalID.setEnabled(false);

        labelAddress.setFont(new Font("Tahoma", 1, 14)); // NOI18N
        labelAddress.setText("Address");

        tfAddress.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        tfAddress.setEnabled(false);

        labelWeeklyPrice.setFont(new Font("Tahoma", 1, 14)); // NOI18N
        labelWeeklyPrice.setText("Weekly Price ($)");

        tfWeeklyPrice.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        tfWeeklyPrice.setEnabled(false);

        labelFurnished.setFont(new Font("Tahoma", 1, 14)); // NOI18N
        labelFurnished.setText("Furnished");

        cbFurnished.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        cbFurnished.setText("Furnished");
        cbFurnished.setEnabled(false);

        labelDescription.setFont(new Font("Tahoma", 1, 14)); // NOI18N
        labelDescription.setText("Description");

        tfDescription.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        tfDescription.setEnabled(false);

        labelCouplesAllowed.setFont(new Font("Tahoma", 1, 14)); // NOI18N
        labelCouplesAllowed.setText("Couples");

        cbCouplesAllowed.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        cbCouplesAllowed.setText("Allowed");
        cbCouplesAllowed.setEnabled(false);

        labelBathroom.setFont(new Font("Tahoma", 1, 14)); // NOI18N
        labelBathroom.setText("Bathroom");

        cbAttachedBathroom.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        cbAttachedBathroom.setText("Attached");
        cbAttachedBathroom.setEnabled(false);

        labelNumberOfRooms.setFont(new Font("Tahoma", 1, 14)); // NOI18N
        labelNumberOfRooms.setText("Rooms");

        comboboxNumberOfRooms.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        comboboxNumberOfRooms.setModel(new DefaultComboBoxModel(new String[] { "Select Number", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }));
        comboboxNumberOfRooms.setEnabled(false);

        labelNumberOfBathrooms.setFont(new Font("Tahoma", 1, 14)); // NOI18N
        labelNumberOfBathrooms.setText("Bathrooms");

        comboboxNumberOfBathrooms.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        comboboxNumberOfBathrooms.setModel(new DefaultComboBoxModel(new String[] { "Select Number", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }));
        comboboxNumberOfBathrooms.setEnabled(false);

        labelGarage.setFont(new Font("Tahoma", 1, 14)); // NOI18N
        labelGarage.setText("Garage Space");

        cbGarageSpace.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        cbGarageSpace.setText("Available");
        cbGarageSpace.setEnabled(false);

        labelPetsAllowed.setFont(new Font("Tahoma", 1, 14)); // NOI18N
        labelPetsAllowed.setText("Pets");

        cbPetsAllowed.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        cbPetsAllowed.setText("Allowed");
        cbPetsAllowed.setEnabled(false);

        btnAdd.setFont(new Font("Tahoma", 1, 14)); // NOI18N
        btnAdd.setText("Add");
        btnAdd.setEnabled(false);
        btnAdd.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnEdit.setFont(new Font("Tahoma", 1, 14)); // NOI18N
        btnEdit.setText("Edit");
        btnEdit.setEnabled(false);
        btnEdit.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnUpdate.setFont(new Font("Tahoma", 1, 14)); // NOI18N
        btnUpdate.setText("Update");
        btnUpdate.setEnabled(false);
        btnUpdate.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        tfNumberOfCurrentlyDisplayedRental.setFont(new Font("Tahoma", 1, 14)); // NOI18N
        tfNumberOfCurrentlyDisplayedRental.setHorizontalAlignment(JTextField.CENTER);
        tfNumberOfCurrentlyDisplayedRental.setEnabled(false);
        tfNumberOfCurrentlyDisplayedRental.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                tfNumberOfCurrentlyDisplayedRentalActionPerformed(evt);
            }
        });

        labelOf.setFont(new Font("Tahoma", 1, 14)); // NOI18N
        labelOf.setText("of");

        tfTotalNumberOfRentals.setFont(new Font("Tahoma", 1, 14)); // NOI18N
        tfTotalNumberOfRentals.setHorizontalAlignment(JTextField.CENTER);
        tfTotalNumberOfRentals.setEnabled(false);
        tfTotalNumberOfRentals.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                tfTotalNumberOfRentalsActionPerformed(evt);
            }
        });

        btnBack.setFont(new Font("Tahoma", 1, 14)); // NOI18N
        btnBack.setText("<");
        btnBack.setEnabled(false);
        btnBack.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnNext.setFont(new Font("Tahoma", 1, 14)); // NOI18N
        btnNext.setText(">");
        btnNext.setEnabled(false);
        btnNext.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        btnRemove.setFont(new Font("Tahoma", 1, 12)); // NOI18N
        btnRemove.setText("Remove");
        btnRemove.setMaximumSize(new Dimension(83, 25));
        btnRemove.setMinimumSize(new Dimension(83, 25));
        btnRemove.setPreferredSize(new Dimension(83, 25));
        btnRemove.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        GroupLayout panelMainLayout = new GroupLayout(panelMain);
        panelMain.setLayout(panelMainLayout);
        panelMainLayout.setHorizontalGroup(panelMainLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(panelMainLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelMainLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(panelMainLayout.createSequentialGroup()
                        .addGroup(panelMainLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(labelRentalType)
                            .addComponent(labelRentalID)
                            .addComponent(labelAddress)
                            .addComponent(labelWeeklyPrice)
                            .addComponent(labelFurnished)
                            .addComponent(labelDescription)
                            .addComponent(labelCouplesAllowed)
                            .addComponent(labelBathroom)
                            .addComponent(labelNumberOfRooms)
                            .addComponent(labelNumberOfBathrooms)
                            .addComponent(labelGarage)
                            .addComponent(labelPetsAllowed))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelMainLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(tfRentalID)
                            .addComponent(comboboxRentalType, GroupLayout.Alignment.TRAILING, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(tfWeeklyPrice)
                            .addComponent(tfAddress, GroupLayout.Alignment.TRAILING)
                            .addComponent(tfDescription, GroupLayout.Alignment.TRAILING)
                            .addGroup(panelMainLayout.createSequentialGroup()
                                .addGroup(panelMainLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                    .addComponent(cbPetsAllowed)
                                    .addComponent(cbGarageSpace)
                                    .addComponent(comboboxNumberOfRooms, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cbCouplesAllowed)
                                    .addComponent(cbAttachedBathroom)
                                    .addComponent(cbFurnished)
                                    .addComponent(comboboxNumberOfBathrooms, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(panelMainLayout.createSequentialGroup()
                        .addComponent(btnAdd, GroupLayout.PREFERRED_SIZE, 80, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelMainLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnRemove, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnEdit, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(panelMainLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(panelMainLayout.createSequentialGroup()
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnUpdate)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(tfNumberOfCurrentlyDisplayedRental, GroupLayout.PREFERRED_SIZE, 50, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labelOf)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tfTotalNumberOfRentals, GroupLayout.PREFERRED_SIZE, 50, GroupLayout.PREFERRED_SIZE))
                            .addGroup(GroupLayout.Alignment.TRAILING, panelMainLayout.createSequentialGroup()
                                .addGap(141, 141, 141)
                                .addComponent(btnBack)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnNext))))))
        );
        panelMainLayout.setVerticalGroup(panelMainLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(panelMainLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelMainLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(labelRentalType)
                    .addComponent(comboboxRentalType, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelMainLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(labelRentalID)
                    .addComponent(tfRentalID, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelMainLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(labelAddress)
                    .addComponent(tfAddress, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelMainLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(labelWeeklyPrice)
                    .addComponent(tfWeeklyPrice, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelMainLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(labelFurnished)
                    .addComponent(cbFurnished))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelMainLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(tfDescription, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelDescription))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelMainLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(labelCouplesAllowed)
                    .addComponent(cbCouplesAllowed))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelMainLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(labelBathroom)
                    .addComponent(cbAttachedBathroom))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelMainLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(labelNumberOfRooms)
                    .addComponent(comboboxNumberOfRooms, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelMainLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(labelNumberOfBathrooms)
                    .addComponent(comboboxNumberOfBathrooms, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelMainLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(labelGarage)
                    .addComponent(cbGarageSpace))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelMainLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(labelPetsAllowed)
                    .addComponent(cbPetsAllowed))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelMainLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(panelMainLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                        .addComponent(tfTotalNumberOfRentals, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addComponent(labelOf))
                    .addGroup(panelMainLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                        .addComponent(btnAdd)
                        .addComponent(btnEdit)
                        .addComponent(btnUpdate))
                    .addComponent(tfNumberOfCurrentlyDisplayedRental, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addGroup(panelMainLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(btnNext)
                    .addGroup(panelMainLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                        .addComponent(btnBack)
                        .addComponent(btnRemove, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(labelTitle, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnEditRental, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnAddRental, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnViewRentals, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnExit, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelMain, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelTitle, GroupLayout.PREFERRED_SIZE, 59, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(btnAddRental)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEditRental)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnViewRentals)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnExit)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(panelMain, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // method executed when the [View Rentals] button is clicked
    // will disable main GUI frame
    // create frame with JTable to display previously entered Rental objects
    private void btnViewRentalsActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnViewRentalsActionPerformed

        // verify that at least 1 Rental object had been created first before allowing to view
        if (rentalList.isEmpty()) {
            JOptionPane.showMessageDialog(FSAGUI.this, "Please enter at least 1 Rental before viewing.", "FSA - Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
       
        // create an instance of ViewRentalsGUI and pass it the Rental previously created
        // TO UPDATE: to display list of Rentals for Phase 2
        new ViewRentalsGUI(rentalList);

        // disable this JFrame
        this.setEnabled(false);
    
    }//GEN-LAST:event_btnViewRentalsActionPerformed

    // method executed when [Add Rental] button from left menu bar is clicked
    // resets the input form and turns on the rental type combobox for user to select Rental type to add
    private void btnAddRentalActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnAddRentalActionPerformed
        
        resetInputForm();
        comboboxRentalType.setEnabled(true);     // turn on the vehicle type combo box
    }//GEN-LAST:event_btnAddRentalActionPerformed

    // updates the input form for data entry
    // depending on the selection, the appropriate fields will be enabled
    private void comboboxRentalTypeItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_comboboxRentalTypeItemStateChanged
        
        currentSelectedType = comboboxRentalType.getSelectedIndex();    // lock in selected Rental sub type

        if (currentSelectedType == 0) // invalid type
        {
            // reset form and disable all functions
            disableInputForm();
        }

        if (currentSelectedType == ROOM_TYPE) {
            // reset form for RoomRental entry
            roomEntryForm();            
        }

        if (currentSelectedType == WHOLE_TYPE) {
            // reset form for WholeRental entry
            wholeEntryForm();            
        }
    }//GEN-LAST:event_comboboxRentalTypeItemStateChanged

    // method executed when the [Exit] button is clicked
    // will pass onto the exit() method to manage user confirmation
    private void btnExitActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        exit(); // exit() method called for confirmation
    }//GEN-LAST:event_btnExitActionPerformed

    // method to ask users if they really intend to exit the program
    // default (package) access given so that the other Frames can use it too.
    static void exit() {
        int selection = JOptionPane.showConfirmDialog(null, "Do you want to exit?", "FSA - Exit Confirmation", JOptionPane.OK_CANCEL_OPTION);

        if (selection == JOptionPane.YES_OPTION) 
        {
            System.exit(0);
        }
    }

    // method used to validate the input fields
    // generates appropriate error messages to the user
    // returns boolean value representing validation success or failure
    private boolean validateInput()
    {
        // NOTE: RentalID does not need to be validated because it's creation was strongly controlled by this application
        
        // validate address
        if(tfAddress.getText().equals(""))  // if address field left empty
        {
            JOptionPane.showMessageDialog(FSAGUI.this, "Please enter an Address.", "FSA - Input Error", JOptionPane.ERROR_MESSAGE);
            tfAddress.requestFocus();
            return false;
        }
        
        // validate weekly price for input
        if(tfWeeklyPrice.getText().equals(""))  // if weekly price field left empty
        {
            JOptionPane.showMessageDialog(FSAGUI.this, "Please enter a Weekly Price.", "FSA - Input Error", JOptionPane.ERROR_MESSAGE);
            tfWeeklyPrice.requestFocus();
            return false;
        }
        
        // validate weekly price for value
        try
        {
            Double.parseDouble(tfWeeklyPrice.getText());    // try and convert weekly price into a double
        }
        catch(NumberFormatException nfe)    // unable to convert into a double
        {
            JOptionPane.showMessageDialog(FSAGUI.this, "Please enter a valid Weekly Price.", "FSA - Input Error", JOptionPane.ERROR_MESSAGE);
            tfWeeklyPrice.requestFocus();
            return false;
        }
            
        // NOTE: Furnished does not need to be validated because it is a checkbox representing a boolean
        
        // validate description
        if(tfDescription.getText().equals(""))  // if Description field left empty
        {
            JOptionPane.showMessageDialog(FSAGUI.this, "Please enter a Description.", "FSA - Input Error", JOptionPane.ERROR_MESSAGE);
            tfDescription.requestFocus();
            return false;
        }
        
        // if RoomRental
            // NOTE: Couples Allowed does not need to be validated because it is a checkbox representing a boolean
            // NOTE: Attached Bathroom does not need to be validated because it is a checkbox representing a boolean
        
        // if WholeRental
        if (currentSelectedType == WHOLE_TYPE) 
        {
            // validate number of rooms
            if(comboboxNumberOfRooms.getSelectedIndex()==0) // invalid selection for Number of Rooms made
            {
                JOptionPane.showMessageDialog(FSAGUI.this, "Please select a value for Number of Rooms.", "FSA - Input Error", JOptionPane.ERROR_MESSAGE);
                comboboxNumberOfRooms.requestFocus();
                return false;
            }

            // validate number of bathrooms
            if(comboboxNumberOfBathrooms.getSelectedIndex()==0) // invalid selection for Number of Rooms made
            {
                JOptionPane.showMessageDialog(FSAGUI.this, "Please select a value for Number of Bathrooms.", "FSA - Input Error", JOptionPane.ERROR_MESSAGE);
                comboboxNumberOfBathrooms.requestFocus();
                return false;
            }
        
            // NOTE: Garage Space does not need to be validated because it is a checkbox representing a boolean
            // NOTE: Pets Allowed does not need to be validated because it is a checkbox representing a boolean
        }
        
        return true;    // if all tests above has passed, this will be executed       
    }
    
    
    // method executed when the [Add] button clicked
    // will validate user input
    // and create new Rental subclass object and assign to Rental reference variable
    // TO UPDATE: to add this object to a List
    private void btnAddActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        
        // validating input fields
        if(validateInput()==false)  // if any test fails
        {
            return; // stop execution of this method
        }

        // next valid index number as a 4 digit String
        String idNumString = String.format("%04d", Rental.getNextValidIDNumber());
        String nextID = "";
        
        // determine which Rental type was created
        if (currentSelectedType == ROOM_TYPE) 
        {
            // generate a valid RentalID
            nextID = RoomRental.PREFIX + idNumString;
            
            // construct a RoomRental object and assign it to currentRental
            currentRental = new RoomRental(nextID,
                                            tfAddress.getText(),
                                            Double.parseDouble(tfWeeklyPrice.getText()),
                                            cbFurnished.isSelected(),
                                            tfDescription.getText(),
                                            cbCouplesAllowed.isSelected(),
                                            cbAttachedBathroom.isSelected()
                                        );
        }

        if (currentSelectedType == WHOLE_TYPE) 
        {
            // generate a valid RentalID
            nextID = WholeRental.PREFIX + idNumString;
            
            // construct a WholeRental object and assign it to currentRental
            currentRental = new WholeRental(nextID,
                                            tfAddress.getText(),
                                            Double.parseDouble(tfWeeklyPrice.getText()),
                                            cbFurnished.isSelected(),
                                            tfDescription.getText(),
                                            comboboxNumberOfRooms.getSelectedIndex(),
                                            comboboxNumberOfBathrooms.getSelectedIndex(),
                                            cbGarageSpace.isSelected(),
                                            cbPetsAllowed.isSelected()
                                        );
        }
        rentalList.add(currentRental);

        // echo back to user that a Rental object was successfully added
        JOptionPane.showMessageDialog(FSAGUI.this, "A Rental with Rental ID " + currentRental.getRentalID() + " has been added", "FSA - Rental Added", JOptionPane.INFORMATION_MESSAGE);

        resetInputForm();   // reset input form for next input
    }//GEN-LAST:event_btnAddActionPerformed

    // method executed when [Edit Rental] button on left side menu clicked
    // will verify that at least 1 Rental object had been added
    // load the details of the first Rental object to the fields
    // TO UPDATE: enable the navigation buttons to move through the other Rental objects in Phase 2
    private void btnEditRentalActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnEditRentalActionPerformed

        // verify that at least 1 Rental object had been created first before allowing to edit
        if (rentalList.isEmpty()) {
            JOptionPane.showMessageDialog(FSAGUI.this, "Please enter at least 1 Rental before editing.", "FSA - Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Populate fields with values from currentRental
        tfRentalID.setText(rentalList.get(iter).getRentalID());
        tfAddress.setText(rentalList.get(iter).getAddress());
        tfWeeklyPrice.setText(String.format("%.2f", rentalList.get(iter).getWeeklyPrice()));
        cbFurnished.setSelected(rentalList.get(iter).getFurnished());
        tfDescription.setText(rentalList.get(iter).getDescription());        

        if (rentalList.get(iter) instanceof RoomRental) 
        {
            comboboxRentalType.setSelectedIndex(ROOM_TYPE);
            disableInputForm(); // unfortunately needed to counter the ComboBox's itemStateChanged
            
            cbCouplesAllowed.setSelected(((RoomRental)rentalList.get(iter)).getCouplesAllowed());
            cbAttachedBathroom.setSelected(((RoomRental)rentalList.get(iter)).getAttachedBathroom());
        }
        
        if (rentalList.get(iter) instanceof WholeRental) 
        {
            comboboxRentalType.setSelectedIndex(WHOLE_TYPE);
            disableInputForm(); // unfortunately needed to counter the ComboBox's itemStateChanged
            
            comboboxNumberOfRooms.setSelectedIndex(((WholeRental)rentalList.get(iter)).getNumberOfRooms());
            comboboxNumberOfBathrooms.setSelectedIndex(((WholeRental)rentalList.get(iter)).getNumberOfBathrooms());
            cbGarageSpace.setSelected(((WholeRental)rentalList.get(iter)).getGarageSpace());
            cbPetsAllowed.setSelected(((WholeRental)rentalList.get(iter)).getPetsAllowed());
        }

        // display the indices (Only 1 for Phase 1)
        tfTotalNumberOfRentals.setText("1");
        tfNumberOfCurrentlyDisplayedRental.setText("1");

        // enable/disable the appropriate buttons
        btnBack.setEnabled(true);   // disabled for now since there is no more than 1 Rental object
        btnNext.setEnabled(true);   // disabled for now since there is no more than 1 Rental object
        btnEdit.setEnabled(true);
        btnRemove.setEnabled(true);
        
    }//GEN-LAST:event_btnEditRentalActionPerformed

public Integer getIter(){
    return this.iter;
}    
// method executed when the [Edit] button on the edit form is clicked
    // will enable the appropriate fields for editing
    private void btnEditActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
         int i=0;
        // enable the appropriate fields for editing
        // NOTE: Rental ID not to be edited based on design
        tfAddress.setEnabled(true);
        tfWeeklyPrice.setEnabled(true);
        cbFurnished.setEnabled(true);
        tfDescription.setEnabled(true);

        if (rentalList.get(i) instanceof RoomRental) 
        {
            cbCouplesAllowed.setEnabled(true);
            cbAttachedBathroom.setEnabled(true);
        }
        
        if (rentalList.get(i) instanceof WholeRental) 
        {
            comboboxNumberOfRooms.setEnabled(true);
            comboboxNumberOfBathrooms.setEnabled(true);
            cbGarageSpace.setEnabled(true);
            cbPetsAllowed.setEnabled(true);
        }

        // enable/disable the appropriate buttons
        btnBack.setEnabled(false);  // cannot navigate while edit is in effect
        btnNext.setEnabled(false);  // cannot navigate while edit is in effect
        btnEdit.setEnabled(false);  // already in edit mode
        btnUpdate.setEnabled(true);
        btnRemove.setEnabled(true);// [Update] button enabled to save changes
    }//GEN-LAST:event_btnEditActionPerformed

    // method executed when [Update] button on edit form clicked
    // will re-validate input before saving updated details
    private void btnUpdateActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed

        // validating input fields
        if(validateInput()==false)  // if any test fails
        {
            return; // stop execution of this method
        }
        Integer i=this.getIter();
        System.out.println(i+" ");
        // save details back into currentRental
        // NOTE: Rental ID does not need to be updated based on design
        rentalList.get(i).setAddress(tfAddress.getText());
        rentalList.get(i).setWeeklyPrice(Double.parseDouble(tfWeeklyPrice.getText()));
        rentalList.get(i).setFurnished(cbFurnished.isSelected());
        rentalList.get(i).setDescription(tfDescription.getText());

        if (rentalList.get(i) instanceof RoomRental) 
        {
            RoomRental current = (RoomRental)rentalList.get(i);
            current.setCouplesAllowed(cbCouplesAllowed.isSelected());
            current.setAttachedBathroom(cbAttachedBathroom.isSelected());
        }
        
        if (rentalList.get(i) instanceof WholeRental) 
        {
            WholeRental current = (WholeRental)rentalList.get(i);
            current.setNumberOfRooms(comboboxNumberOfRooms.getSelectedIndex());
            current.setNumberOfBathrooms(comboboxNumberOfBathrooms.getSelectedIndex());
            current.setGarageSpace(cbGarageSpace.isSelected());
            current.setPetsAllowed(cbPetsAllowed.isSelected());
        }

        disableInputForm(); // input form fields disabled once update is complete

        // enable/disable the appropriate buttons
        btnBack.setEnabled(true);   // disabled for now since there is no more than 1 Rental object   
        btnNext.setEnabled(false);   // disabled for now since there is no more than 1 Rental object
        btnEdit.setEnabled(true); 
        btnRemove.setEnabled(true);// [Edit] button reenabled once update is complete
    }//GEN-LAST:event_btnUpdateActionPerformed

    // window closing event to be re-directed to exit() method
    private void formWindowClosing(WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        exit();
    }//GEN-LAST:event_formWindowClosing

    private void btnNextActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        if(iter == rentalList.size()-1 ) {
            JOptionPane.showMessageDialog(FSAGUI.this, "This is the last entry of data.You can go back for previous entries.", "FSA - Error", JOptionPane.ERROR_MESSAGE);
            
        } else {
            iter++;
        }
        tfRentalID.setText(rentalList.get(iter).getRentalID());
        tfAddress.setText(rentalList.get(iter).getAddress());
        tfWeeklyPrice.setText(String.format("%.2f", rentalList.get(iter).getWeeklyPrice()));
        cbFurnished.setSelected(rentalList.get(iter).getFurnished());
        tfDescription.setText(rentalList.get(iter).getDescription());        

        if (rentalList.get(iter) instanceof RoomRental) 
        {
            comboboxRentalType.setSelectedIndex(ROOM_TYPE);
            disableInputForm(); // unfortunately needed to counter the ComboBox's itemStateChanged
            
            cbCouplesAllowed.setSelected(((RoomRental)rentalList.get(iter)).getCouplesAllowed());
            cbAttachedBathroom.setSelected(((RoomRental)rentalList.get(iter)).getAttachedBathroom());
        }
        
        if (rentalList.get(iter) instanceof WholeRental) 
        {
            comboboxRentalType.setSelectedIndex(WHOLE_TYPE);
            disableInputForm(); // unfortunately needed to counter the ComboBox's itemStateChanged
            
            comboboxNumberOfRooms.setSelectedIndex(((WholeRental)rentalList.get(iter)).getNumberOfRooms());
            comboboxNumberOfBathrooms.setSelectedIndex(((WholeRental)rentalList.get(iter)).getNumberOfBathrooms());
            cbGarageSpace.setSelected(((WholeRental)rentalList.get(iter)).getGarageSpace());
            cbPetsAllowed.setSelected(((WholeRental)rentalList.get(iter)).getPetsAllowed());
        }

        // display the indices (Only 1 for Phase 1)
        tfTotalNumberOfRentals.setText("1");
        tfNumberOfCurrentlyDisplayedRental.setText("1");

        // enable/disable the appropriate buttons
        btnBack.setEnabled(true);  // cannot navigate while edit is in effect
        btnNext.setEnabled(true);  // cannot navigate while edit is in effect
        btnEdit.setEnabled(true);  // already in edit mode
        btnUpdate.setEnabled(false);
        btnRemove.setEnabled(true);// [Update] button enabled to save changes
        tfNumberOfCurrentlyDisplayedRental.setText(String.valueOf(iter+1));
         tfTotalNumberOfRentals.setText(String.valueOf(rentalList.size()));
        
        
        
        
        
        
    
    }//GEN-LAST:event_btnNextActionPerformed

    private void btnBackActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
          if(iter == 0 ) {
            JOptionPane.showMessageDialog(FSAGUI.this, "This is the first entry of data.You can go forward for next entries.", "FSA - Error", JOptionPane.ERROR_MESSAGE);
            
        } else {
            iter--;
        }
        tfRentalID.setText(rentalList.get(iter).getRentalID());
        tfAddress.setText(rentalList.get(iter).getAddress());
        tfWeeklyPrice.setText(String.format("%.2f", rentalList.get(iter).getWeeklyPrice()));
        cbFurnished.setSelected(rentalList.get(iter).getFurnished());
        tfDescription.setText(rentalList.get(iter).getDescription());        

        if (rentalList.get(iter) instanceof RoomRental) 
        {
            comboboxRentalType.setSelectedIndex(ROOM_TYPE);
            disableInputForm(); // unfortunately needed to counter the ComboBox's itemStateChanged
            
            cbCouplesAllowed.setSelected(((RoomRental)rentalList.get(iter)).getCouplesAllowed());
            cbAttachedBathroom.setSelected(((RoomRental)rentalList.get(iter)).getAttachedBathroom());
        }
        
        if (rentalList.get(iter) instanceof WholeRental) 
        {
            comboboxRentalType.setSelectedIndex(WHOLE_TYPE);
            disableInputForm(); // unfortunately needed to counter the ComboBox's itemStateChanged
            
            comboboxNumberOfRooms.setSelectedIndex(((WholeRental)rentalList.get(iter)).getNumberOfRooms());
            comboboxNumberOfBathrooms.setSelectedIndex(((WholeRental)rentalList.get(iter)).getNumberOfBathrooms());
            cbGarageSpace.setSelected(((WholeRental)rentalList.get(iter)).getGarageSpace());
            cbPetsAllowed.setSelected(((WholeRental)rentalList.get(iter)).getPetsAllowed());
        }

        // display the indices (Only 1 for Phase 1)
        tfTotalNumberOfRentals.setText("1");
        tfNumberOfCurrentlyDisplayedRental.setText("1");

        // enable/disable the appropriate buttons
        btnBack.setEnabled(true);  // cannot navigate while edit is in effect
        btnNext.setEnabled(true);  // cannot navigate while edit is in effect
        btnEdit.setEnabled(true);  // already in edit mode
        btnUpdate.setEnabled(false);
        btnRemove.setEnabled(true);// [Update] button enabled to save changes
        tfNumberOfCurrentlyDisplayedRental.setText(String.valueOf(iter+1));
         tfTotalNumberOfRentals.setText(String.valueOf(rentalList.size()));
        
        
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnRemoveActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        String idConfirmation = JOptionPane.showInputDialog(FSAGUI.this, "Please Enter the RID of the room you want to delete.","Delete verification", JOptionPane.INFORMATION_MESSAGE);
        if(rentalList.get(iter).getRentalID().equals(idConfirmation)){
        tfRentalID.setText("");
        tfAddress.setText("");
        tfWeeklyPrice.setText("");
        cbFurnished.setSelected(false);
        tfDescription.setText("");
        rentalList.remove(rentalList.get(iter));
        }
        else{
            JOptionPane.showMessageDialog(FSAGUI.this, "Please Enter the RID of the room you want to delete.", "FSA - Error", JOptionPane.ERROR_MESSAGE);
            
            
        }
        
        
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void tfNumberOfCurrentlyDisplayedRentalActionPerformed(ActionEvent evt) {//GEN-FIRST:event_tfNumberOfCurrentlyDisplayedRentalActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_tfNumberOfCurrentlyDisplayedRentalActionPerformed

    private void tfTotalNumberOfRentalsActionPerformed(ActionEvent evt) {//GEN-FIRST:event_tfTotalNumberOfRentalsActionPerformed
        // TODO add your handling code here:
       
    }//GEN-LAST:event_tfTotalNumberOfRentalsActionPerformed

    // used to reset input form
    private void resetInputForm() {
        clearAllFields();
        disableInputForm();
        comboboxRentalType.setSelectedIndex(0);
        comboboxRentalType.setEnabled(false);
    }

    // used to clear all the input fields
    private void clearAllFields() 
    {
        tfRentalID.setText("");
        tfAddress.setText("");
        tfWeeklyPrice.setText("");
        cbFurnished.setSelected(false);
        tfDescription.setText("");
        cbCouplesAllowed.setSelected(false);
        cbAttachedBathroom.setSelected(false);
        comboboxNumberOfRooms.setSelectedIndex(0);
        comboboxNumberOfBathrooms.setSelectedIndex(0);
        cbGarageSpace.setSelected(false);
        cbPetsAllowed.setSelected(false);
    }

    // used to disable all fields on the input form
    private void disableInputForm() 
    {
        tfRentalID.setEnabled(false);
        tfAddress.setEnabled(false);
        tfWeeklyPrice.setEnabled(false);
        cbFurnished.setEnabled(false);
        tfDescription.setEnabled(false);
        cbCouplesAllowed.setEnabled(false);
        cbAttachedBathroom.setEnabled(false);
        comboboxNumberOfRooms.setEnabled(false);
        comboboxNumberOfBathrooms.setEnabled(false);
        cbGarageSpace.setEnabled(false);
        cbPetsAllowed.setEnabled(false);
        btnAdd.setEnabled(false);
        btnEdit.setEnabled(false);
        btnUpdate.setEnabled(false);
        btnBack.setEnabled(false);
        btnNext.setEnabled(false);
        btnRemove.setEnabled(false);
    }

    // used to set up the input fields to input a RoomRental
    private void roomEntryForm() {
        // NOTE: Rental ID does not need to be edited
        tfAddress.setEnabled(true);
        tfWeeklyPrice.setEnabled(true);
        cbFurnished.setEnabled(true);
        tfDescription.setEnabled(true);
        cbCouplesAllowed.setEnabled(true);
        cbAttachedBathroom.setEnabled(true);
        comboboxNumberOfRooms.setEnabled(false);
        comboboxNumberOfBathrooms.setEnabled(false);
        cbGarageSpace.setEnabled(false);
        cbPetsAllowed.setEnabled(false);
        btnAdd.setEnabled(true);
        btnEdit.setEnabled(false);
        btnUpdate.setEnabled(false);
        btnBack.setEnabled(false);
        btnNext.setEnabled(false); 
        btnRemove.setEnabled(false);
    }

    // used to set up the input fields to input a WholeRental
    private void wholeEntryForm() {
        // NOTE: Rental ID does not need to be edited
        tfAddress.setEnabled(true);
        tfWeeklyPrice.setEnabled(true);
        cbFurnished.setEnabled(true);
        tfDescription.setEnabled(true);
        cbCouplesAllowed.setEnabled(false);
        cbAttachedBathroom.setEnabled(false);
        comboboxNumberOfRooms.setEnabled(true);
        comboboxNumberOfBathrooms.setEnabled(true);
        cbGarageSpace.setEnabled(true);
        cbPetsAllowed.setEnabled(true);
        btnAdd.setEnabled(true);
        btnEdit.setEnabled(false);
        btnUpdate.setEnabled(false);
        btnBack.setEnabled(false);
        btnNext.setEnabled(false);
        btnRemove.setEnabled(false);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FSAGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FSAGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FSAGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FSAGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FSAGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton btnAdd;
    private JButton btnAddRental;
    private JButton btnBack;
    private JButton btnEdit;
    private JButton btnEditRental;
    private JButton btnExit;
    private JButton btnNext;
    private JButton btnRemove;
    private JButton btnUpdate;
    private JButton btnViewRentals;
    private JCheckBox cbAttachedBathroom;
    private JCheckBox cbCouplesAllowed;
    private JCheckBox cbFurnished;
    private JCheckBox cbGarageSpace;
    private JCheckBox cbPetsAllowed;
    private JComboBox<String> comboboxNumberOfBathrooms;
    private JComboBox<String> comboboxNumberOfRooms;
    private JComboBox<String> comboboxRentalType;
    private JLabel labelAddress;
    private JLabel labelBathroom;
    private JLabel labelCouplesAllowed;
    private JLabel labelDescription;
    private JLabel labelFurnished;
    private JLabel labelGarage;
    private JLabel labelNumberOfBathrooms;
    private JLabel labelNumberOfRooms;
    private JLabel labelOf;
    private JLabel labelPetsAllowed;
    private JLabel labelRentalID;
    private JLabel labelRentalType;
    private JLabel labelTitle;
    private JLabel labelWeeklyPrice;
    private JPanel panelMain;
    private JTextField tfAddress;
    private JTextField tfDescription;
    private JTextField tfNumberOfCurrentlyDisplayedRental;
    private JTextField tfRentalID;
    private JTextField tfTotalNumberOfRentals;
    private JTextField tfWeeklyPrice;
    // End of variables declaration//GEN-END:variables

    // Additional variables required by the application
    private Rental currentRental;       // used to store most recently added Rental object
    ArrayList<Rental> rentalList=new ArrayList<Rental>(); 
    Integer iter=0;// TO UPDATE: create an ArrayList or LinkedList to store all Rental objects
    private final int ROOM_TYPE = 1;    // fixed value representing a RoomRental selection - ties in with combobox index value
    private final int WHOLE_TYPE = 2;   // fixed value representing a WholeRental selection - ties in with combobox index value
    private int currentSelectedType;    // used to track which Rental sub type is currently selected by the user

}// end class FSAGUI
